package br.com.pongolino.bindingexploit.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;

import br.com.pongolino.bindingexploit.model.Usuario;

@Controller
@RequestMapping("/usuario")
@SessionAttributes("usuario")
public class WithoutAttackController {
	
	private Usuario simularRetornoUsuarioDeChamadaBancoDados(Long id) {
		Usuario usuario = new Usuario();
		usuario.setId(id);
		return usuario;
	}

	@GetMapping("/editar/{id}")
	public String preEdit(@PathVariable("id") Long id, Model attr) {
		Usuario usuario = simularRetornoUsuarioDeChamadaBancoDados(id);
		
		System.out.println(String.format("GET:\nEsperado ID: %d | Nome: %s", usuario.getId(), usuario.getNome()));
		
		attr.addAttribute("usuario", usuario);
		return "usuario/editar_sem_ataque";
	}
	
	/*
	 * CASO 02 - COM ATAQUE.
	 * Um model attribute tem referência a uma session com o mesmo nome, 
	 * se haver biding de um post e for injetado um atributo, o binding
	 * do spring irá atingir o model atribute que irá atingir a session.
	 */
	
	@GetMapping("/editar/ataque/{id}")
	public String preEditComAtaque(@PathVariable("id") Long id, Model attr) {
		Usuario usuario = simularRetornoUsuarioDeChamadaBancoDados(id);
		
		System.out.println(String.format("GET:\nEsperado ID: %d | Nome: %s", usuario.getId(), usuario.getNome()));
		
		attr.addAttribute("usuario", usuario);
		return "usuario/editar_ataque";
	}
	
	/*
	 * Quando passamos como parâmetro um objeto, o Spring tentará converter o formulário
	 * para este objeto chamando os setters etc. Entretanto, se um hacker passar um
	 * atributo HTML, poderá fazer binding e realizar o ataque. 
	 */
	
	@PostMapping("/editar")
	public String edit(@ModelAttribute("usuario") Usuario usuario) {
		System.out.println(String.format("POST:\nEnviado ID: %d | Nome: %s", usuario.getId(), usuario.getNome()));
		return "usuario/resultado";
	}
	
	@GetMapping("/sessao")
	public String sessionTestar (@ModelAttribute("usuario") Usuario usuario) {
		System.out.println(String.format("SESSION:\nID: %d | Nome: %s", usuario.getId(), usuario.getNome()));
		return "usuario/resultado";
	}
}
